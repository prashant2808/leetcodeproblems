/* ----USING DFS----*/
class Solution {
     
int area=0;
    public int maxAreaOfIsland(int[][] grid) {
         int area=0;
        boolean [][]vis= new boolean [grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++)
         {
             for(int j=0;j<grid[0].length;j++)
             {
                  int [] curr=new int [1];
                 if(grid[i][j]==0||vis[i][j])continue;
                  dfs(grid,i,j,curr,vis);
                  area=Math.max(area,curr[0]);
                  
             }
         } 
          
         return area; 
    }
    void  dfs(int [][] grid,int i,int j,int []curr,boolean [][] vis)
    {
        if(i<0||j<0||i==grid.length||j==grid[0].length||vis[i][j]||grid[i][j]==0)return;
         curr[0]+=1; 
        vis[i][j]=true;
         int []dx={1,0,-1,0};
         int []dy={0,1,0,-1};
         for(int k=0;k<4;k++)
         {
            dfs(grid,i+dx[k],j+dy[k],curr,vis);
         }
    }
    
}





/*-----USING UNION FIND ----*/
 class DisjointSet{

    ArrayList<Integer> parent= new ArrayList<>();
    ArrayList<Integer> size= new ArrayList<>();
    public DisjointSet(int n){
        for(int i=0;i<=n;i++)
        {
            parent.add(i);
            size.add(1);
        }
    }
    public int findpar(int node)
    {
        if(node==parent.get(node))return node;
        int ulp=findpar(parent.get(node));
        parent.set(node,ulp);
        return parent.get(node);
    }
    
    public void unionbysize(int u,int v)
    {
        int ulp_u=findpar(u);
        int ulp_v=findpar(v);
        if(ulp_u==ulp_v){
            return ;
        }
        if(size.get(ulp_u)<size.get(ulp_v))
        {
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v,size.get(ulp_v)+size.get(ulp_u));
        }
        else
        {
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u,size.get(ulp_u)+size.get(ulp_v));
        }


    }
}
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int ones=0;
        DisjointSet ds= new DisjointSet(m*n);
        for(int row=0;row<m;row++)
        {
            for(int col=0;col<n;col++)
            {
                 
                if(grid[row][col]==0)continue;
                ones++;
                int [] dx={1,0,-1,0};
                int [] dy={0,1,0,-1};
            for(int k=0;k<4;k++)
            {
                int newr=row+dx[k];
                int newc=col+dy[k];
                if(isvalid(newr,newc,m,n)&&grid[newr][newc]==1)
                {
                    int nodeno=row*n+col;
                    int adjno=newr*n+newc;
                    ds.unionbysize(nodeno,adjno);
                }
            }
            
          }
        }
        if(ones==0)return 0;
        int max=0;
        for(int cell=0;cell<m*n;cell++)
        {
            max=Math.max(max,ds.size.get(ds.findpar(cell)));
        }
        return max;
        
        
    }
    boolean isvalid(int i,int j,int m,int n)
    {
        return i>=0&&j>=0&&i<m&&j<n;
    }
}
