class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
                 List<List<Integer>> res= new ArrayList();
         boolean  [] visited = new boolean[nums.length];
   backtrack(nums,new ArrayList(),res,visited);
   return res;
   
         

        
    }
    void backtrack(int [] nums,List<Integer> curr,List<List<Integer>> res,boolean[] visited)
    {
         
            if(curr.size()==nums.length && (!res.contains(curr))){
            res.add(new ArrayList(curr));
            return;
        }
        for(int j=0;j<nums.length;j++){ 
            if(visited[j])continue;
        curr.add(nums[j]);
        visited[j]=true;
        backtrack(nums,curr,res,visited);
        curr.remove(curr.size()-1);
        visited[j]=false;
        
    }
    }
}
