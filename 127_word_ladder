class Solution {
    class Pair{
        String word;
        int steps;
        public Pair(String word,int steps){
            this.word=word;
            this.steps=steps;
        }
    }
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String> set= new HashSet<>();
        for(int i=0;i<wordList.size();i++)
        {
            set.add(wordList.get(i));
        }
        Queue<Pair> q= new LinkedList<>();
        q.offer( new Pair(beginWord,1));
        if(set.contains(beginWord))set.remove(beginWord);
        while(!q.isEmpty())
        {
           String word=q.peek().word;
           int steps=q.peek().steps;
           q.poll();
           if(word.equals(endWord))return steps;
           for(int i=0;i<word.length();i++)
           { 
           for(char ch='a';ch<='z';ch++)
           {

            char [] arr= word.toCharArray();
            arr[i]=ch;
            String replaced= new String(arr);
            if(set.contains(replaced))
            {
                set.remove(replaced);
                q.offer(new Pair(replaced,steps+1));
            }

           }
           }
        }
        return 0;
    }
}
