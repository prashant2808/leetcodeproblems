class Solution {
    public long totalCost(int[] costs, int k, int candidates) {
        int n=candidates;
        PriorityQueue<Integer> pq1= new PriorityQueue<>();
         PriorityQueue<Integer> pq2= new PriorityQueue<>();
          int i=0;
          int j=costs.length-1;
           while(i<n)
           {
               pq1.offer(costs[i]);
               i++;
           }
           while(j>costs.length-n-1&&j>=i)
           {
               pq2.offer(costs[j]);
               j--;
           }
           long ans=0;
           while(k>0)
           {
               if(pq1.isEmpty())
               {
                 while(k>0)
                 {
                     ans+=pq2.poll();
                     k--;

                 }
                 break;
               }
                if(pq2.isEmpty())
               {
                 while(k>0)
                 {
                     ans+=pq1.poll();
                     k--;

                 }
                 break;
               }
               if(pq1.peek()<=pq2.peek())
               {
                   ans+=pq1.poll();
                   if(i<=j)
                   {
                       pq1.offer(costs[i]);
                       i++;
                   }
               }
               else
               {
                   ans+=pq2.poll();
                   if(i<=j)
                   {
                       pq2.offer(costs[j]);
                       j--;
                   }
               }
               k--;

           }
           return ans;
        
    }
}
