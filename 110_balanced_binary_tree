/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// first approach -here at each node we  find height of right 
//and left subtree and if it is not a balanced tree we return false 
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(height(root)==-1)return false;
        return true;

        
    }
     int height(TreeNode root)
    {
        if(root==null)
       return 0;
        int lh =height(root.left);
        int rh = height(root.right);
        if(lh==-1||rh==-1)return -1;
        if(Math.abs(lh-rh)>1)return -1;
        return 1+Math.max(rh,lh);
        
    }

}
// second approach-  here we are finding height at every node
// if it is not a balanced binary tree we return -1  else we 
//return the height .
class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null)
        return true;
        int lh=height(root.left);
        int rh=height(root.right);
        if(Math.abs(lh-rh)>1)return false;
        boolean left =isBalanced(root.left);
        boolean right=isBalanced(root.right);
        if(!right||!left)return false;
        return true;
        
    }
    int height(TreeNode root)
    {
        if(root==null)
       return 0;
       return 1+ Math.max(height(root.left),height(root.right));
        
    }
}
