class Solution {
    public void solve(char[][] board) {
        boolean [][]vis= new boolean[board.length][board[0].length];
        for(int i=0,j=0;i<board.length;i++)
        {
            if(!vis[i][j]&&board[i][j]=='O')
            bfs(board,vis,i,j);
            j=board[0].length-1;
            if(!vis[i][j]&&board[i][j]=='O')
            bfs(board,vis,i,j);
        }
        for(int i=0,j=0;j<board[0].length;j++)
        {
            if(!vis[i][j]&&board[i][j]=='O')
            bfs(board,vis,i,j);
            i=board.length-1;
            if(!vis[i][j]&&board[i][j]=='O')
            bfs(board,vis,i,j);
        }
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]=='O'&&!vis[i][j])
                board[i][j]='X';
            }
        }   
    }
    void bfs(char[][]grid,boolean[][]vis,int i,int j)
    {
        if(i==grid.length||j==grid[0].length||i<0||j<0||vis[i][j]||grid[i][j]=='X')
        return;
        vis[i][j]=true;
        bfs(grid,vis,i+1,j);
        bfs(grid,vis,i-1,j);
        bfs(grid,vis,i,j+1);
        bfs(grid,vis,i,j-1);
    }
}
