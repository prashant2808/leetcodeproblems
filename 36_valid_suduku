class Solution {
    public boolean isValidSudoku(char[][] board) {
        
       return solve(board);
         
        
    }
     boolean solve(char[][]board)
    {
        for(int row=0;row<board.length;row++)
        {
            for(int col=0;col<board.length;col++)
            {
               char ch=board[row][col];
                if(ch!='.')
                {
                    board[row][col]='.';
                    if(!isSafe(board,row,col,ch))
                    return false;
                    board[row][col]=ch;   
                     
                }   
            }

        }
        return true;

    }
    boolean isSafe(char[][] board,int row,int col,char ch)
    {
        //check for row 
        for(int i=0;i<board.length;i++)
        {
            if(board[row][i]==ch)
            return false;
        }
        //check for column
        for(char [] num:board)
        {
            if(num[col]==ch)
            return false;
        }
        int sqrt=(int)(Math.sqrt(board.length));
        int rowstart=row-row%sqrt;
        int colstart=col-col%sqrt;

        for(int r=rowstart;r<rowstart+sqrt;r++)
        {
           for(int c=colstart;c<colstart+sqrt;c++)
           {
               if(board[r][c]==ch)
               return false;
           }
        }
        return true;

       
    }
}
