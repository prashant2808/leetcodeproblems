/*----BRUTE FORCE WAY ----*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        List<TreeNode> res= new ArrayList<>();
        if(root==null)return 0;
        traversal(root,res);
        return res.size();
        
    }
    void traversal(TreeNode root,List<TreeNode> res)
    {
        if(root==null)return;
        res.add(root);
        traversal(root.left,res);
        traversal(root.right,res);
    }
}
/*----OPTIMAL WAY-----*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
       if(root==null)return 0;
       return 1+countNodes(root.left)+countNodes(root.right);
    }
}
