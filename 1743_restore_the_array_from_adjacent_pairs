class Solution {
    public int[] restoreArray(int[][] pairs) {
          Map<Integer,List<Integer>> adj = new  HashMap<>();
          int [] res= new int [pairs.length+1];
          for(int i=0;i<pairs.length;i++)
          {
              int x=pairs[i][0];
              int y=pairs[i][1];
              if(adj.containsKey(x))
              {
                  adj.get(x).add(y);

              }
              else {
                  ArrayList<Integer> li= new ArrayList<>();
                  li.add(y);
                  adj.put(x,li);
              }
              if(adj.containsKey(y))
              {
                  adj.get(y).add(x);

              }
              else 
              {
                  ArrayList<Integer> li= new ArrayList<>();
                  li.add(x);
                  adj.put(y,li);
              }
              
          }
          int  first=0;
          for(int x:adj.keySet())
          {
              if(adj.get(x).size()==1){
                  first=x;
                  break;
              }
          }
          Set<Integer> vis= new HashSet<>();
          List<Integer> ans= new ArrayList<>();
          dfs(first,adj,ans,vis);
          for(int i=0;i<res.length;i++)
          {
              res[i]=ans.get(i);
          }
          return res;

    }
    void dfs(int curr,Map<Integer,List<Integer>> adj,List<Integer> ans,Set<Integer> vis)
    {
        ans.add(curr);
        vis.add(curr);
        for(int x:adj.get(curr))
        {
            if(!vis.contains(x))dfs(x,adj,ans,vis);
        }
    }
}
