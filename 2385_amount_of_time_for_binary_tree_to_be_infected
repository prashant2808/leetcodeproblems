/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        HashMap<TreeNode,TreeNode> parent = new HashMap<>();
        if(root==null)return 0;
        int nodes=count(root);
        findparent(root,parent);
        HashSet<TreeNode> visited = new HashSet<>();
        Queue<TreeNode> q= new LinkedList<>();
        q.offer(findnode(root,start));
        int ans=0;
        while(!q.isEmpty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode node = q.poll();
                visited.add(node);
                if(parent.containsKey(node)&&!visited.contains(parent.get(node)))
                q.offer(parent.get(node));
                if(node.left!=null&&!visited.contains(node.left))q.offer(node.left);
                if(node.right!=null&&!visited.contains(node.right))q.offer(node.right);
            }
            ans++;
            if(visited.size()==parent.size()+1)return ans-1;
        }
        return 0;

        
    }
    int count(TreeNode root)
    {
        if(root==null)return 0;
        return 1+count(root.left)+count(root.right);
    }
    TreeNode findnode(TreeNode root,int val)
    {
        if(root==null)return null;
        if(root.val==val)return root;
         TreeNode left =findnode(root.left,val);
         TreeNode right=findnode(root.right,val);
         return left!=null?left:right;
    }
    void findparent(TreeNode root,HashMap<TreeNode,TreeNode> map)
    {
        if(root==null)return;
        if(root.left!=null)map.put(root.left,root);
        if(root.right!=null)map.put(root.right,root);
        findparent(root.left,map);
        findparent(root.right,map);
    }
}
