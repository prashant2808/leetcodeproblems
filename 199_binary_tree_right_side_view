/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
          List<List<Integer>> res= new ArrayList<>();
        Queue<TreeNode> q= new LinkedList<>();
        List<Integer> ans = new ArrayList<>();
        if(root==null)return ans;
        q.offer(root);
        while(!q.isEmpty())
        {
            List<Integer> temp = new ArrayList<>();
            int levelsize=q.size();
            for(int i=0;i<levelsize;i++)
            {
                TreeNode current =q.peek();
                if(current.left!=null)
                {
                    q.offer(current.left);
                }
                 if(current.right!=null)
                {
                    q.offer(current.right);
                }
                temp.add(q.poll().val);
            }
            res.add(temp);
        }
        for(int i=0;i<res.size();i++)
        {
             List<Integer> temp = res.get(i);
             ans.add(temp.get(temp.size()-1));
        }
        return ans;
        
    }
}
/* recursive solution */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result= new ArrayList<>();
        view(root,result,0);
        return result;
         
    }
    void view(TreeNode root,List<Integer> result,int depth)
    {
        if(root==null)return;
    if(depth==result.size())result.add(root.val);
    view(root.right,result,depth+1);
        view(root.left,result,depth+1);
    }
}
