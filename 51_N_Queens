class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res= new ArrayList<>();
        boolean [][]board =new boolean [n][n];
         
        queens(board,0,res);
        return res;

        
    }
      void queens(boolean [][] board,int row,List<List<String>>res)
    {
           if(row==board.length){ 
               ArrayList<String> list= adder(board);
                 
               res.add(list);
           return;
           }
           //placing the queen and checking for every row and column 
           for(int col=0;col<board.length;col++)
           {
               if(isSafe(board,row,col))
               {
                   board[row][col]=true;
                  queens(board,row+1,res);
                
               board[row][col]=false;
               }
           }
           return;
            
    }
    boolean isSafe(boolean [][] board,int row,int col)
    {
        //vertical 
        for(int i=0;i<row;i++)
        {
            if(board[i][col])
            return false;
        }
        //diagonal left
        int maxleft=Math.min(row,col);
        for(int i=1;i<=maxleft;i++)
        {
            if(board[row-i][col-i])
            return false;
        }
        //diagonal right
         int maxright=Math.min(row,board.length-col-1);
        for(int i=1;i<=maxright;i++)
        {
            if(board[row-i][col+i])
            return false;
        }
        return true;
        

    }
    ArrayList<String> adder (boolean [][]board)
    {
        ArrayList<String> list= new ArrayList<>();
        for(boolean[] row: board)
        {
            String s="";
            for(boolean x:row)
            {
                if(x)
                {
                    s=s+"Q";
                }
                else {
                    s=s+".";
                }
            }
            list.add(s);
        }
        return list;
    }

}
