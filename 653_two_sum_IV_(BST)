/*----USING INORDER TRAVERSAL---*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        List<Integer> list= new ArrayList<>();
        inorder(root,list);
          int i=0;
          int j=list.size()-1;
          while(i<j)
          {
              int sum=list.get(i)+list.get(j);
              if(sum==k)return true;
              else if(sum<k)i++;
              else 
              j--;

          }
         return false;
        
    }
    void inorder(TreeNode root,List<Integer> res)
    {
        if(root==null)return;
        inorder(root.left,res);
        res.add(root.val);
        inorder(root.right,res);
    }
}






/*------USING BST ITERATOR-----*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class BSTIterator{
     private Stack<TreeNode> st = new Stack<>();
     boolean reverse=true;
     public BSTIterator(TreeNode root,boolean reverse){
         this.reverse=reverse;
         pushAll(root);
     }
     public boolean hasnext(){
         return !st.isEmpty();
     }
     public int next(){
         TreeNode temp=st.pop();
         if(reverse==false)
         pushAll(temp.right);
         else
         pushAll(temp.left);
         return temp.val;
     }
     private void pushAll(TreeNode root)
     {
          while(root!=null)
          {
              st.push(root);
              if(reverse)root=root.right;
              else 
              root=root.left;
          }
     }
 }
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root==null)return false;
        BSTIterator l= new BSTIterator(root,false);
        BSTIterator r= new BSTIterator(root,true);
        int i=l.next();
        int j=r.next();
        while(i<j)
        {
            if(i+j==k)return true;
            else if(i+j<k)i=l.next();
            else 
            j=r.next();
        }
        return false;
         
    }
}
