/*----USING BIGINTEGER CLASS ----*/
import java.math.BigInteger;
class Solution {
    public String kthLargestNumber(String[] nums, int k) {
        BigInteger [] big =new BigInteger[nums.length];
        for(int i=0;i<nums.length;i++)
        {
            big[i]=new BigInteger(nums[i]);
        }
          Arrays.sort(big);
          BigInteger res= big[big.length-k];
          return res.toString();
    }
}
/*-----USING PRIORITY QUEUE/HEAP ----*/
class Solution {
    public String kthLargestNumber(String[] nums, int k) {
        PriorityQueue<String> pq= new PriorityQueue<>((s1,s2)->{
            if(s1.length()==s2.length())return s1.compareTo(s2);
        else
        return Integer.compare(s1.length(),s2.length());
        });
        for(int i=0;i<nums.length;i++)
        {
            pq.offer(nums[i]);
            if(pq.size()>k)pq.poll();
        }
         return pq.poll();
    }
}
