 class Pair{
    int next;
    int wt;
    public Pair(int next,int wt)
    {
        this.next=next;;
        this.wt=wt;
    }
}
class Graph {
    ArrayList<ArrayList<Pair>> adj;
    int N;
    int [][]dis;
    public Graph(int n, int[][] edges) {
        N=n;
        adj=new ArrayList<>();
        dis= new int[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==j)dis[i][j]=0;
                else dis[i][j]=Integer.MAX_VALUE;
            }
        }
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj.get(u).add(new Pair(v,wt));

        }
        
    }
    
    public void addEdge(int[] edge) {
        adj.get(edge[0]).add(new Pair(edge[1],edge[2]));    
    }
    
    public int shortestPath(int node1, int node2) {
       return dijkstra(node1,node2);
         	 
	}
    
    int dijkstra(int src,int dstn)
    {
        int dis[]= new int [N];
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[src]=0;
        PriorityQueue<Pair> pq= new PriorityQueue<>((a,b)->a.wt-b.wt);
        pq.offer(new Pair(src,0));

        while(!pq.isEmpty())
        {
            Pair p= pq.poll();
            int node =p.next;
            int currwt=p.wt;
            if(currwt>dis[node])continue;
            if(node==dstn)return currwt;
            for(Pair nbr:adj.get(node))
            {
                int nodewt=nbr.wt;
                int adjnode=nbr.next;
                if(dis[adjnode]>currwt+nodewt)
                {
                    dis[adjnode]=currwt+nodewt;
                    pq.offer(new Pair(adjnode,dis[adjnode]));
                }
            }

        }
        return  dis[dstn]==Integer.MAX_VALUE?-1:dis[dstn];


    }
     
     
}

/**
 * Your Graph object will be instantiated and called as such:
 * Graph obj = new Graph(n, edges);
 * obj.addEdge(edge);
 * int param_2 = obj.shortestPath(node1,node2);
 */
