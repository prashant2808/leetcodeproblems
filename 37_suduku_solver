class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
         
        
    }
     boolean solve(char[][]board)
    {
        for(int row=0;row<board.length;row++)
        {
            for(int col=0;col<board.length;col++)
            {
                if(board[row][col]=='.')
                {
                    for(int val=1;val<=9;val++)
                    {
                        if(isSafe(board,row,col,(char)(val+'0')))
                        {
                            board[row][col]=(char)(val+'0');
                            boolean next=solve(board);
                            if(next)
                            {
                                return true;
                            }
                            else 
                            board[row][col]='.';
                        }
                    }
                     return false;
                     
                }
                 
                 
            }
        }
        return true;

    }
    boolean isSafe(char[][] board,int row,int col,char ch)
    {
        //check for row 
        for(int i=0;i<board.length;i++)
        {
            if(board[row][i]==ch)
            return false;
        }
        //check for column
        for(char [] num:board)
        {
            if(num[col]==ch)
            return false;
        }
        int sqrt=(int)(Math.sqrt(board.length));
        int rowstart=row-row%sqrt;
        int colstart=col-col%sqrt;

        for(int r=rowstart;r<rowstart+sqrt;r++)
        {
           for(int c=colstart;c<colstart+sqrt;c++)
           {
               if(board[r][c]==ch)
               return false;
           }
        }
        return true;


    }
}
