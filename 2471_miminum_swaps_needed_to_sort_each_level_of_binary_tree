/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minimumOperations(TreeNode root) {
      Queue<TreeNode> q= new LinkedList<>();
      int res=0;
      q.offer(root);
      while(!q.isEmpty())
      {
          List<Integer> temp= new ArrayList<>();
          int levsize=q.size();
          for(int i=0;i<levsize;i++)
          {
              TreeNode node = q.poll();
              temp.add(node.val);
              if(node.left!=null)q.offer(node.left);
              if(node.right!=null)q.offer(node.right);
              

          }
          res+=getswaps(temp);
      }
      return res;
      
        
    }
    int getswaps(List<Integer> list)
    {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<list.size();i++)
        {
            map.put(list.get(i),i);
        }
        int count =0;
        Collections.sort(list);
        for(int i=0;i<list.size();i++)
        {
            if(map.get(list.get(i))==i)
            continue;
            else 
             
            {
                count++;
                int x=map.get(list.get(i));
                int y=i;
                int temp=list.get(x);
                list.set(x,list.get(y));
                list.set(y,temp);
                

            }
            i--;
            
        }
        return count;
    }
}
