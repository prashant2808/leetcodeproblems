class DisjointSet{

    ArrayList<Integer> parent= new ArrayList<>();
    ArrayList<Integer> size= new ArrayList<>();
    public DisjointSet(int n){
        for(int i=0;i<=n;i++)
        {
            parent.add(i);
            size.add(1);
        }
    }
    public int findpar(int node)
    {
        if(node==parent.get(node))return node;
        int ulp=findpar(parent.get(node));
        parent.set(node,ulp);
        return parent.get(node);
    }
     
    public void unionbysize(int u,int v)
    {
        int ulp_u=findpar(u);
        int ulp_v=findpar(v);
        if(ulp_u==ulp_v){
            return ;
        }
        if(size.get(ulp_u)<size.get(ulp_v))
        {
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v,size.get(ulp_v)+size.get(ulp_u));
        }
        else
        {
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u,size.get(ulp_u)+size.get(ulp_v));
        }


    }
}
class Solution {
    public List<Boolean> areConnected(int n, int threshold, int[][] queries) {
        List<Boolean> res= new ArrayList<>();
        DisjointSet ds= new DisjointSet(n);
        for(int i=threshold+1;i<=n;i++)
        {
             int j=1;
             while(i*j<=n)
             {
                ds.unionbysize(i,i*j);
                j++;
             }
              /*or
              for(int t=i*2;t<=n;t+=i)
              {
                  ds.unionbysize(i,t);
              }
              */
        }
        for(int i=0;i<queries.length;i++)
        {
            int u=queries[i][0];
            int v=queries[i][1];
            if(ds.findpar(u)==ds.findpar(v))res.add(true);
             
             else res.add(false);

            
             
        }
        return res;
        
    }
    
}
