class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> res =new ArrayList<>();
        int [] vis= new int [graph.length];
        int [] pathvis= new int [graph.length];
        int [] check= new int [graph.length];
        for(int i=0;i<graph.length;i++)
        {
            dfs(i,graph,vis,pathvis,check);
        }
        for(int i=0;i<graph.length;i++)
        {
            if(check[i]==1)
            res.add(i);
        }
        return res;
        
    }
    boolean dfs(int node,int [][] graph,int []vis,int []pathvis,int [] check)
    {
        vis[node]=1;
        pathvis[node]=1;
        check[node]=0;
        for(int it:graph[node])
        {
            if(vis[it]==0)
            {
                if(dfs(it,graph,vis,pathvis,check))
                return true;
            }
            else if(pathvis[it]==1)
            return true;
        }
        pathvis[node]=0;
        check[node]=1;
        return false;
    }
}
