/*---USING DFS___*/
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> res =new ArrayList<>();
        int [] vis= new int [graph.length];
        int [] pathvis= new int [graph.length];
        int [] check= new int [graph.length];
        for(int i=0;i<graph.length;i++)
        {
            dfs(i,graph,vis,pathvis,check);
        }
        for(int i=0;i<graph.length;i++)
        {
            if(check[i]==1)
            res.add(i);
        }
        return res;
        
    }
    boolean dfs(int node,int [][] graph,int []vis,int []pathvis,int [] check)
    {
        vis[node]=1;
        pathvis[node]=1;
        check[node]=0;
        for(int it:graph[node])
        {
            if(vis[it]==0)
            {
                if(dfs(it,graph,vis,pathvis,check))
                return true;
            }
            else if(pathvis[it]==1)
            return true;
        }
        pathvis[node]=0;
        check[node]=1;
        return false;
    }
}
/*------USING TOPOLOGICAL SORT -----*/
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int v=graph.length;
        ArrayList<ArrayList<Integer>> revadj= new ArrayList<>();
        for(int i=0;i<v;i++)revadj.add(new ArrayList());
         int indeg[] = new int [v];
         for(int i=0;i<v;i++)
         {
             for(int it:graph[i])
             {
                 revadj.get(it).add(i);
                 indeg[i]++;
             }
         }
         Queue<Integer> q= new LinkedList<>();
         for(int i=0;i<v;i++)
         {
             if(indeg[i]==0)q.offer(i);
         }
          List<Integer> res= new ArrayList<>();
         while(!q.isEmpty())
         {
             int node =q.poll();
             res.add(node);
             for(int it:revadj.get(node))
             {
                 indeg[it]--;
                 if(indeg[it]==0)q.offer(it);
             }

         }
         Collections.sort(res);
         return res;

    }
}
