/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class Tuple{
     TreeNode node;
     int vertical;
     int col;
     public Tuple(TreeNode node,int vertical,int col)
     {
         this.node=node;
         this.vertical=vertical;
         this.col=col;
     }
 }
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> map= new TreeMap<>();
        Queue<Tuple> q= new LinkedList<Tuple>();
        q.offer(new Tuple(root,0,0));
        while(!q.isEmpty())
        {
            Tuple tup =q.poll();
            TreeNode node =tup.node;
            int x= tup.vertical;
            int y=tup.col;
            if(!map.containsKey(x))
            {
                map.put(x,new TreeMap<>());
            }
            if(!map.get(x).containsKey(y))
            {
                map.get(x).put(y,new PriorityQueue<>());
            }
            map.get(x).get(y).offer(node.val);
            if(node.left!=null)
            {
                q.offer(new Tuple(node.left,x-1,y+1));
            }
            if(node.right!=null)
            {
                q.offer(new Tuple(node.right,x+1,y+1));
            }
        }
        List<List<Integer>> res= new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>> mp:map.values())
        {
             ArrayList<Integer> temp = new ArrayList<>();
             for(PriorityQueue<Integer> pq:mp.values())
             {
                 while(!pq.isEmpty())
                 {
                    temp.add(pq.poll());
                 }
             }
             res.add(temp);
        }
        return res;

        
    }
}
