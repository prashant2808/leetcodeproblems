/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) {
        int max=0;
        List<Integer> res = new ArrayList<>();
        HashMap<Integer,Integer> map = new HashMap<>();
        traverse(root,map);
        for(Map.Entry<Integer,Integer> entry:map.entrySet())
        {
            max=Math.max(max,entry.getValue());
        }
         for(Map.Entry<Integer,Integer> entry:map.entrySet())
        {
             if(entry.getValue()==max)res.add(entry.getKey());
        }
        int  [] ans = new int [res.size()];
        for(int i=0;i<ans.length;i++)
        {
            ans[i]=res.get(i);
        }
        return ans;

         
        
    }
    void traverse(TreeNode root,HashMap<Integer,Integer> map)
    {
        if(root==null)return;
        traverse(root.left,map);
        map.put(root.val,map.getOrDefault(root.val,0)+1);
        traverse(root.right,map);
    }
}
