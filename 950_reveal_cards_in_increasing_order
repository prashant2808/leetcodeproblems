/*------BRUTE FORCCE APPROACH-----*/
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        Arrays.sort(deck);
        List<Integer> temp = new ArrayList<>();
        temp.add(deck[deck.length-1]);
        for(int i=deck.length-2;i>=0;i--)
        {
           int x=temp.get(temp.size()-1);
           temp.remove(temp.size()-1);
           temp.add(0,x);
           temp.add(0,deck[i]);
        }
        int ans[]= new int [deck.length];
        for(int i=0;i<deck.length;i++)
        {
            ans[i]=temp.get(i);
        }
        return ans;
        
    }
}
/*----OPTIMAL APPROACH----*/
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        Arrays.sort(deck);
        Queue<Integer> q= new LinkedList<>();
        int [] res = new int [deck.length];
        for(int i=0;i<deck.length;i++)q.offer(i);
        for(int i=0;i<res.length;i++)
        {
            res[q.poll()]=deck[i];
            q.offer(q.poll());
        }
        return res;
    }
}
