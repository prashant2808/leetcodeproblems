class Solution {
    class Pair{
        int x;
        int y;
        public Pair(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
       // Arrays.sort(meetings,(a,b)->{
       //     return  a[2]-b[2];
      //  });

       // for(int i=0;i<meetings.length;i++)
        // System.out.println(meetings[i][0]+" "+meetings[i][1]+" "+meetings[i][2]);
        Map<Integer,ArrayList<Pair>> map= new TreeMap<>();
        for(int i=0;i<meetings.length;i++){
            if(!map.containsKey(meetings[i][2])){
                 map.put(meetings[i][2],new ArrayList<>());
            }
             map.get(meetings[i][2]).add(new Pair(meetings[i][0],meetings[i][1]));
        }
        for(Map.Entry<Integer,ArrayList<Pair>> en: map.entrySet()){
          ArrayList<Pair> curr= en.getValue();
         System.out.println(" time ->"+en.getKey()+"\n values ->");
         for(int i=0;i<curr.size();i++)System.out.print("["+curr.get(i).x+","+curr.get(i).y+"],");
         System.out.println("\n");
      }
        boolean [] know= new boolean[n];
        DisjointSet ds= new DisjointSet(n);
        ds.unionbysize(0,firstPerson);
        know[0]=true;
        know[firstPerson]=true;
      for(Map.Entry<Integer,ArrayList<Pair>> en: map.entrySet()){
          ArrayList<Pair> curr= en.getValue();
          HashSet<Integer> set= new HashSet<>();
          for(Pair p:curr){
              set.add(p.x);
              set.add(p.y);
              /*
              if(!know[p.x]){
                  ds.parent.set(p.x,p.x);
              }
              if(!know[p.y]){
                  ds.parent.set(p.y,p.y);
              }
              */
              ds.unionbysize(p.x,p.y);
          }
          for(int person:set){
              if(ds.findpar(person)==ds.findpar(0)){
                  know[person]=true;
              }
              else {
                  ds.parent.set(person,person);

              }
          }
      }
        ArrayList<Integer> res= new ArrayList<>();
        for(int i=0;i<n;i++){
            if(know[i])res.add(i);
        }
        return res;    
    }
}
 class DisjointSet{

    ArrayList<Integer> parent= new ArrayList<>(); 
    ArrayList<Integer> size= new ArrayList<>();
    public DisjointSet(int n){
        for(int i=0;i<=n;i++)
        {
            parent.add(i);
            size.add(1);
        }
    }
    public int findpar(int node)
    {
        if(node==parent.get(node))return node;
        int ulp=findpar(parent.get(node));
        parent.set(node,ulp);
        return parent.get(node);
    }
    public void unionbysize(int u,int v)
    {
        int ulp_u=findpar(u);
        int ulp_v=findpar(v);
        if(ulp_u==ulp_v){
            return ;
        }
        if(size.get(ulp_u)<size.get(ulp_v))
        {
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v,size.get(ulp_v)+size.get(ulp_u));
        }
        else
        {
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u,size.get(ulp_u)+size.get(ulp_v));
        }
    }
}
